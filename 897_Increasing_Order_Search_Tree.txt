
    QUESTION :-

897. Increasing Order Search Tree
Easy

Share
Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is
now the root of the tree, and every node has no left child and only one right child.

 Example 1:
Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]
 Example 2:
Input: root = [5,1,7]
Output: [1,null,5,null,7]
 
 Constraints:
The number of nodes in the given tree will be in the range [1, 100].
0 <= Node.val <= 1000

Accepted:218,142
Submissions:278,492



    ANSWER :-

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
// APPROACH : as BST inorder is a sorted array and in the question the new tree formed is as per the inorder fashion from previos tree, thus using inorder traversal to form new tree.
    void inorder(TreeNode* &ans, TreeNode * root)   {
        
        if(root==NULL)
            return;
        
        inorder(ans,root->left);
        ans->right = new TreeNode(root->val);
        ans = ans->right;
        inorder(ans,root->right);
        
    }
    
    TreeNode* increasingBST(TreeNode* root) {
        TreeNode *temp, *ans = new TreeNode();  //creating one extra variable temp, so as we can form a tree in right of ans node & when returning we can return temp->right ie ans root.
        temp=ans;
        
        inorder(ans,root);
        
        return temp->right;
    }
};



  // void inorder(TreeNode*& ans, TreeNode* root) {
  //       if (!root) return;
  //       inorder(ans, root->left);
  //       ans->right = new TreeNode(root->val);
  //       ans = ans->right;
  //       inorder(ans, root->right);
  //   }
  //   TreeNode* increasingBST(TreeNode* root) {
  //       TreeNode* temp;
  //       TreeNode* ans = new TreeNode();
  //       temp = ans;
  //       inorder(ans, root);
  //       return temp->right;
  //   }