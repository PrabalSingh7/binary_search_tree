
    QUESTION :=

108. Convert Sorted Array to Binary Search Tree
Easy

Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary
search tree. A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never 
differs by more than one.

 Example 1:
Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:
 Example 2:
Input: nums = [1,3]
Output: [3,1]
Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.
 
 Constraints:
1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in a strictly increasing order.

Accepted:759,217
Submissions:1,140,418



    ANSWER :=

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
// APPROACH (my own approach) : apply binary seacrh concept on the given sorted vector , so as a result the BST formed will always be balan.ced
    
    TreeNode* function(vector<int> nums, int start, int end, int n) {
        
        int mid = (start+end)/2;
        if(mid > n) return NULL;
        if(end < start )    return NULL;
        
        TreeNode* root = new TreeNode(nums[mid]);
        root->left = function(nums,start,mid-1,n);
        root->right = function(nums,mid+1,end,n);
        
        return root;
    }
    
    
    TreeNode* sortedArrayToBST(vector<int>& nums) {
    
        int n = nums.size();
        TreeNode* answer = function(nums,0,n-1,n);
        
        return answer;
    }
};
