
    QUESTION :=>

98. Validate Binary Search Tree
Medium

Given the root of a binary tree, determine if it is a valid binary search tree (BST).
A valid BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 
 Example 1:
Input: root = [2,1,3]
Output: true
 Example 2:
Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
 
 Constraints:
The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1

Accepted:1,457,664
Submissions:4,740,912



    ANSWER :=>

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
//APPROACH 1 : as we know the inorder vector of a BST is sorted, thus chceking validity of BST as per this condition.
    
    void inOrder(TreeNode* root) {
        if (!root)
            return;
        inOrder(root->left);
        tree.push_back(root->val);
        inOrder(root->right);
    }
   
    bool isValidBST(TreeNode* root) {
        if (!root)
            return true;
        
        inOrder(root);
        for (int i=1; i<tree.size(); i++)
            if (tree[i] <= tree[i-1])
                return false;
        return true;
    }
private:
    vector<int> tree;
    
//APPROACH 2 : as in a BST, for a node in its left subtree all the values will be less than it and in its right subtree all the values will be grater tahn it.

// in this below approach the EXTREME CORNER CASES are getting stucked    
    
//     bool isBST(TreeNode * root, int min, int max)   {
//         if(root==NULL)  
//             return true;
//         if(root->val > min && root->val < max)  {
//             bool lst = isBST(root->left,min,root->val);
//             bool rst = isBST(root->right,root->val,max);
//             return lst && rst;
//         }
//         else
//             return false;
//     }
    
    
//     bool isValidBST(TreeNode* root) {
//         return isBST(root,INT_MIN,INT_MAX);
//     }

};