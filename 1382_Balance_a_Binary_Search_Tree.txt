
    QUESTION :=>

1382. Balance a Binary Search Tree
Medium

Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there 
is more than one answer, return any of them.
A binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.

 Example 1:
Input: root = [1,null,2,null,3,null,4,null,null]
Output: [2,1,3,null,null,null,4]
Explanation: This is not the only correct answer, [3,1,4,null,2] is also correct.
 Example 2:
Input: root = [2,1,3]
Output: [2,1,3]
 
 Constraints:
The number of nodes in the tree is in the range [1, 104].
1 <= Node.val <= 105

Accepted:97,325
Submissions:121,188



    ANSWER :=>

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

//     APPROACH : 
//         -> firstly, we'll get the inOrder vector of the given BST.
//         -> then , we will make the BST from that inOrder vector using binary search approach.
//             Hence the obtained BST will be a Balanced BST.
    
    
    
    // function to make Balanced BST from the inOrder vector of given un balanced BST.        
    TreeNode* vectorToBalBST(vector<int> &nums, int start, int end, int n) {
        
        int mid = (start+end)/2;
        if(mid > n) return NULL;
        if(end < start )    return NULL;
        
        TreeNode* root = new TreeNode(nums[mid]);
        root->left = vectorToBalBST(nums,start,mid-1,n);
        root->right = vectorToBalBST(nums,mid+1,end,n);
        
        return root;
    }
    
    // get inOrder vector of given unbalanced BST.
    void inorder(TreeNode* root, vector<int>& inOrder)    {
        
        if(root==NULL)  return;
        inorder(root->left,inOrder);
        inOrder.push_back(root->val);
        inorder(root->right,inOrder);
        
    }
    
    TreeNode* balanceBST(TreeNode* root) {
        
        vector<int> inOrder;
        inorder(root,inOrder);      //obtaining inOrder vector of unBalanced BST
        
        int n = inOrder.size();
        TreeNode *answer = vectorToBalBST(inOrder,0,n-1,n); //making Balanced BST
        
        return answer;
    }
};
