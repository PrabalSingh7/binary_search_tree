
    QUESTION :=>

109. Convert Sorted List to Binary Search Tree
Medium

Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.
For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of 
every node never differ by more than 1.

 Example 1:
Input: head = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.
 Example 2:
Input: head = []
Output: []
 
 Constraints:
The number of nodes in head is in the range [0, 2 * 104].
-105 <= Node.val <= 105

Accepted:381,867
Submissions:680,369



    ANSWER :=>

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
//     APPROACH :   [  T(O)=O(n)    S(O)=O(n)  ]
//         -> we'll store all the element values in a vector (so that'll be a sorted vector)
//         -> then we will convert the vector into balanced BST using binary search approach.
    
    // storing values of a list into vector
    void sortedListToVector(ListNode *head, vector<int> &nums)  {
        
        ListNode *temp = head;
        while(temp != NULL)   {
            nums.push_back(temp->val);
            temp = temp->next;
        }
        
        return;
    }     
    
    // coverting sorted vector to balanced BST
    TreeNode *sortedVectorToBalBST(vector<int> nums,int start,int end,int n)    {

        int mid = (end+start)/2;
        if(mid>n) return NULL;
        if(start>end) return NULL;
        
        
        TreeNode *root = new TreeNode(nums[mid]);
        root->left = sortedVectorToBalBST(nums,start,mid-1,n);
        root->right = sortedVectorToBalBST(nums,mid+1,end,n);

        return root;
    }
    
    TreeNode* sortedListToBST(ListNode* head) {
        
        vector<int> nums;
        sortedListToVector(head,nums);
        
        int n = nums.size();
        TreeNode* ans = sortedVectorToBalBST(nums,0,n-1,n);
        
        return ans;
        
    }



// APPROACH 2: [  T(O)=O(nlogn)    S(O)=O(logn)  ]
//     ->applying the binary search Balanced BST building concept directly to the list.
    
    
    
    TreeNode* function(ListNode* head, ListNode* tail = NULL) {
        if (head == tail) 
            return NULL;
        
        ListNode* fast = head, *slow = head;        //used to reach the middle element of list 
        while (fast != tail && fast->next != tail) {
            slow = slow->next;
            fast = fast->next->next;
        }
        
        TreeNode* root = new TreeNode(slow->val);   //creating nodes
        root->left = function(head, slow);          //going left : head to slow(mid)
        root->right = function(slow->next, tail);   //goinf right : slow->next(mid+1) to tail
        
        return root;
    }
    
    TreeNode* sortedListToBST(ListNode* head)   {
        ListNode* tail = NULL;
        return function(head,tail);
    }
};