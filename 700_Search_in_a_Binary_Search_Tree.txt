
    QUESTION :-

700. Search in a Binary Search Tree
Easy
You are given the root of a binary search tree (BST) and an integer val.
Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If 
such a node does not exist, return null.

 Example 1:
Input: root = [4,2,7,1,3], val = 2
Output: [2,1,3]
 Example 2:
Input: root = [4,2,7,1,3], val = 5
Output: []
 
 Constraints:
The number of nodes in the tree is in the range [1, 5000].
1 <= Node.val <= 107
root is a binary search tree.
1 <= val <= 107

Accepted : 500,410
Submissions : 653,332



    ANSWER :-

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    // APPROACH 1 : recurssive approach
    //     T(O) = O(logn)
    //     S(O) = O(height)
//     TreeNode* searchBST(TreeNode* root, int val) {
        
//         //base case 
//         if(root == NULL )
//             return NULL;
        
//         TreeNode *ans = NULL;   //creating a temp TreeNode* to store and return ans
        
//         if(root->val > val) //traversing into left as value < root->val
//             ans = searchBST(root->left, val);
//         else if(root->val < val)    //traversing into left as value > root->val
//             ans = searchBST(root->right, val);
//         else    //case when value is found
//             ans = root;
        
//         return ans;
//     }
    
        
//         APPROACH 2 : itterative approach
//             T(O) = O(logn)
//             S(O) = O(1)
        
    TreeNode* searchBST(TreeNode* root, int val) {
        
        //base case 
        if(root == NULL )
            return NULL;
        
        TreeNode *temp = root;
        
        while(temp != NULL)     {
            
            if(temp->val > val) //traversing into left as value < root->val
                temp = temp->left;
            else if(temp->val < val)    //traversing into left as value > root->val
                temp = temp->right;
            else    //case when value is found
                return temp;
            
        }        
        return NULL;
    }
};