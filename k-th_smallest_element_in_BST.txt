
    QUESTION :-

k-th smallest element in BST 
Medium      Accuracy: 49.44%      Submissions: 61749 
Given a BST and an integer K. Find the Kth Smallest element in the BST. 

 Example 1:

Input:
      2
    /   \
   1     3
K = 2
Output: 2
Example 2:

Input:
        2
      /  \
     1    3
K = 5
Output: -1
 

Your Task:
You don't need to read input or print anything. Your task is to complete the function KthSmallestElement() which 
takes the root of the BST and integer K as inputs and return the Kth smallest element in the BST, if no such element 
exists return -1.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Constraints:
1<=Number of nodes<=100000

 

    ANSWER :-


struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/

class Solution {
  public:
    
// APPROACH 1: as we know that inorder of a BST is sorted, thus we return the kth elemnt 
// of inorder that will be the kth smallest element in the bst.


// int inOrder(Node* root,int &count, int k)   {
    
//     if(root == NULL)
//         return -1;
    
//     //left    
//     int left = inOrder(root->left,count,k);
//     if(left != -1)
//         return left;
        
//     //node
//     count++;
//     if(count == k)
//         return root->data;
        
//     //right
//     return inOrder(root->right,count,k);
    
// }


// APPROACH 2 :- slightly optimised as the recurssive inorder take S(O) = O(height), but Morris
// inorder takes T(O) = O(1).

int MorrisInorderTraversal(Node* root,int k)
{
    Node *current, *pre;
    int i = 0;
 
    if (root == NULL)
        return -1;
 
    current = root;
    while (current != NULL) {
 
        if (current->left == NULL) {
            // cout << current->data << " ";
            i++;
            if(i == k)  {
                    return current->data;
                }
            current = current->right;
        }
        else {
 
            /* Find the inorder predecessor of current */
            pre = current->left;
            while (pre->right != NULL
                   && pre->right != current)
                pre = pre->right;
 
            /* Make current as the right child of its
               inorder predecessor */
            if (pre->right == NULL) {
                pre->right = current;
                current = current->left;
            }
 
            /* Revert the changes made in the 'if' part to
               restore the original tree i.e., fix the right
               child of predecessor */
            else {
                pre->right = NULL;
                // cout << current->data << " ";
                i++;
                if(i == k)  {
                    return current->data;
                }
                current = current->right;
            } /* End of if condition pre->right == NULL */
        } /* End of if condition current->left == NULL*/
    } /* End of while */
    return -1;
}

int KthSmallestElement(Node* root, int k) {
    // int i=0;
    return MorrisInorderTraversal(root,k);
}
};