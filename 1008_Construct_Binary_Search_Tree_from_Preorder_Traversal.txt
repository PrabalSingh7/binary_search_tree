
    QUESTION :=>

1008. Construct Binary Search Tree from Preorder Traversal
Medium

Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), 
construct the tree and return its root.
It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given 
test cases.
A binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than 
Node.val, and any descendant of Node.right has a value strictly greater than Node.val.
A preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses 
Node.right.

  Example 1:
Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]
  Example 2:
Input: preorder = [1,3]
Output: [1,null,3]
 
 Constraints:
1 <= preorder.length <= 100
1 <= preorder[i] <= 1000
All the values of preorder are unique.

Accepted:245,692
Submissions:305,218





    ANSWER :=>

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
// // APPROACH 1 : using the insetBST() function on all elements and thus forming the BST.
//         T(O)=O(n*2)     S(O)=O(ht)
   
//     TreeNode* insertBST(int key, TreeNode* root) {
        
//         if(root == NULL)    {
//             TreeNode* temp = new TreeNode(key);
//             return temp;
//         }
//         if(root->val > key) {
//             root->left = insertBST(key,root->left);
//             return root;
//         }
//         else if(root->val < key) {
//             root->right = insertBST(key,root->right);
//             return root;
//         }
        
//         return root;
        
//     }
    
//     TreeNode* bstFromPreorder(vector<int>& preorder) {
        
//         TreeNode* root = new TreeNode(preorder[0]);
        
//         for(int i=1;i<preorder.size();i++)  {
//             insertBST(preorder[i],root);
//         }
        
//         return root;
//     }
    
    
    
// // APPROACH 2 : as we are known with the fact that inOrder of a BST will be a sorted array .Thus , we can get inOrder vector from preOrder. Now ,as we have an inOrder and preOrder, we can make a tree from them .  T(O)=O(nlogn)   S(O)=O(n)
    
//     //get inorder from preorder
//     void preOrderToInOrder(vector<int> preorder, vector<int> &inorder) {
//         inorder = preorder;
//         sort(inorder.begin(),inorder.end());
//         return;
//     }

//     //finding the indexInInorder of current root element
//     int inorderIndex(int key, vector<int> inorder)   {
//         for(int i=0;i<inorder.size();i++)   {
//             if(inorder[i]==key)
//                 return i;
//         }
//         return -1;
//     }
    
//     //make the tree recursively 
//     TreeNode* constructBST(vector<int> preorder, vector<int> inorder, int start, int end, int &index, int n)    {
        
//         if(index>n)
//             return NULL;
//         if(start>end)
//             return NULL;
        
//         int rootVal = preorder[index++];
//         int indexInInorder = inorderIndex(rootVal,inorder);
        
//         TreeNode* root = new TreeNode(rootVal);
//         root->left = constructBST(preorder,inorder,start,indexInInorder-1,index,n);
//         root->right  = constructBST(preorder,inorder,indexInInorder+1,end,index,n);
        
//         return root;
    
//     }

//     TreeNode* bstFromPreorder(vector<int>& preorder) {
        
//         vector<int> inorder;
//         preOrderToInOrder(preorder,inorder);
        
//         for(int i=0;i<inorder.size();i++)
//             cout<<inorder[i]<<" ";
        
//         TreeNode *root;
//         int start=0,n=inorder.size(),end=n-1,index=0;
//         root = constructBST(preorder,inorder,start,end,index,n);
        
//         return root;
//     }
    
    
    
// APPROACH 3 : using two concepts
//     -> using the approach that for a cureent root its left subtree has value lesser than its root->val and its right subtreee will have values more than its root->val.
//     -> concept of preOrder ie NodeLeftRight, and traversing in the given preorder vector like that.      T(O)=O(n)   S(O)=O(ht)
    
    TreeNode* constructBST(vector<int> preorder, int &index, int mini, int maxi)    {
        
        if(index > preorder.size()-1 )
            return NULL;
        
        if( preorder[index] < mini || preorder[index] > maxi )   {
            return NULL;
        }
        
        TreeNode* root = new TreeNode(preorder[index++]);
        root->left = constructBST(preorder,index,mini,root->val);
        root->right = constructBST(preorder,index,root->val,maxi);
                
        return root;
        
    }
    
    
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        
        int index = 0, mini = INT_MIN, maxi = INT_MAX ;        
        return constructBST(preorder,index,mini,maxi) ;
        
    }
    
};