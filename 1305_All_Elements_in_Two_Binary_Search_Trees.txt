
    QUESTION :->

1305. All Elements in Two Binary Search Trees
Medium

Given two binary search trees root1 and root2, return a list containing all the integers from both trees sorted in 
ascending order.

 Example 1:
Input: root1 = [2,1,4], root2 = [1,0,3]
Output: [0,1,1,2,3,4]
 Example 2:
Input: root1 = [1,null,8], root2 = [8,1]
Output: [1,1,8,8]
 
 Constraints:
The number of nodes in each tree is in the range [0, 5000].
-105 <= Node.val <= 105

Accepted:167,844
Submissions:210,717



    ANSWER :->

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root, vector<int> &answer)   {
        if(root==NULL )return;
        inorder(root->left,answer);
        answer.push_back(root->val);
        inorder(root->right,answer);
        return;

    }
    
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        vector<int> answer;
        inorder(root1,answer);
        inorder(root2,answer);
        sort(answer.begin(),answer.end());
        return answer;
    }
};