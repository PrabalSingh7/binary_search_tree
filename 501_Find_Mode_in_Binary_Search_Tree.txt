
    QUESTION :=>

501. Find Mode in Binary Search Tree
Easy

Share
Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently 
occurred element) in it.
If the tree has more than one mode, return them in any order.
Assume a BST is defined as follows:
The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.
 
 Example 1:
Input: root = [1,null,2,2]
Output: [2]
 Example 2:
Input: root = [0]
Output: [0]
 
 Constraints:
The number of nodes in the tree is in the range [1, 104].
-105 <= Node.val <= 105
 
Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to 
recursion does not count).

Accepted:156,909
Submissions:329,515



    ANSWER :=>

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    map <int,int> mp;   
    vector<int> answer;
public:
    
//APPROACH 1 : (this approach uses extra space :) [but my own approach ;)] )
//    1. using map to store a pair of element -> mode.
//    2. then, storing map value pairs in heap.
//    3. pop out and store answer from heap till they are modes.
    
    
    void inorder(TreeNode *root, map<int,int> &mp)    {
        if(root==NULL)
            return;
        inorder(root->left,mp);
        mp[root->val]++;
        inorder(root->right,mp);
    }
    
    vector<int> findMode(TreeNode* root) {
        inorder(root,mp);
        priority_queue<pair<int,int>> maxh;
        for (auto i = mp.begin();i != mp.end(); i++)
            maxh.push({i->second,i->first});
        int mode = maxh.top().second;
        answer.push_back(mode);
        int modeNumber = maxh.top().first;
        maxh.pop();
        while(maxh.size()>0) {
            if(maxh.top().first == modeNumber)    {
                answer.push_back(maxh.top().second);
                maxh.pop();
            }
            else    
                maxh.pop();
        }
        return answer;
    }
    
    
    
    
    
};