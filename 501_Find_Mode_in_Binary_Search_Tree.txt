
    QUESTION :=>

501. Find Mode in Binary Search Tree
Easy

Share
Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently 
occurred element) in it.
If the tree has more than one mode, return them in any order.
Assume a BST is defined as follows:
The left subtree of a node contains only nodes with keys less than or equal to the node's key.
The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
Both the left and right subtrees must also be binary search trees.
 
 Example 1:
Input: root = [1,null,2,2]
Output: [2]
 Example 2:
Input: root = [0]
Output: [0]
 
 Constraints:
The number of nodes in the tree is in the range [1, 104].
-105 <= Node.val <= 105
 
Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to 
recursion does not count).

Accepted:156,909
Submissions:329,515



    ANSWER :=>

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
// private:
//     map <int,int> mp;   
//     vector<int> answer;
// public:
    
// //APPROACH 1 : (this approach uses extra space :) [but my own approach ;)] )
// //    1. using map to store a pair of element -> mode.
// //    2. then, storing map value pairs in heap.
// //    3. pop out and store answer from heap till they are modes.
    
    
//     void inorder(TreeNode *root, map<int,int> &mp)    {
//         if(root==NULL)
//             return;
//         inorder(root->left,mp);
//         mp[root->val]++;
//         inorder(root->right,mp);
//     }
    
//     vector<int> findMode(TreeNode* root) {
//         inorder(root,mp);
//         priority_queue<pair<int,int>> maxh;
//         for (auto i = mp.begin();i != mp.end(); i++)
//             maxh.push({i->second,i->first});
//         int mode = maxh.top().second;
//         answer.push_back(mode);
//         int modeNumber = maxh.top().first;
//         maxh.pop();
//         while(maxh.size()>0) {
//             if(maxh.top().first == modeNumber)    {
//                 answer.push_back(maxh.top().second);
//                 maxh.pop();
//             }
//             else    
//                 maxh.pop();
//         }
//         return answer;
//     }

    
    
    
// APPROACH 2 : (the optimized approach)
//     1. we'll traverse in inorder fashion.
//     2. for every node val we'll check its count if greater or less than max . 
//         -> if its equal to max :- push that value in answer vector
//         -> if its greater than max :- clear th answer vector(as new mode is found)
//                                    :- push new mode value(current root->val) into answer vector
//                                    :- update the value of max
//         -> else do nothing.
            
    
    
private:
    vector<int> modes;          //carrying the mode values.
    int currentCount ;          //carry count of all curretn root->val.
    int maxCount = INT_MIN;  //carry the count of mode till now.
    int mVal = INT_MIN;         //carry the value of be current root to be counted evry step.

public:
           
    void inOrder(TreeNode *root)    {
    
            if(root==NULL)      return;
            
            if(root->left)
                inOrder(root->left);
            
            if(root->val == mVal)
                currentCount++;
            else
                currentCount = 1;
        
            if(currentCount == maxCount)    //another mode is found
                modes.push_back(root->val);
            if(currentCount > maxCount) {
                modes.clear();              //new mode is found(higer count then prev ones)
                modes.push_back(root->val);      //pushing in new mode.
                maxCount = currentCount;    //updating the new maxCount value
            }
            mVal = root->val;               //new mode value updated
            
            if(root->right)
                inOrder(root->right);
    
    }
    
    vector<int> findMode(TreeNode* root)    {
        inOrder(root);
        return modes;
    }
    
};




