
    QUESTION :=>

450. Delete Node in a BST
Medium

Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node 
reference (possibly updated) of the BST.
Basically, the deletion can be divided into two stages:
Search for a node to remove.
If the node is found, delete the node.
 
 Example 1:
Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.
One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.
 Example 2:
Input: root = [5,3,6,2,4,null,7], key = 0
Output: [5,3,6,2,4,null,7]
Explanation: The tree does not contain a node with value = 0.
 Example 3:
Input: root = [], key = 0
Output: []
 
 Constraints:
The number of nodes in the tree is in the range [0, 104].
-105 <= Node.val <= 105
Each node has a unique value.
root is a valid binary search tree.
-105 <= key <= 105
 
Follow up: Could you solve it with time complexity O(height of tree)?



    ANSWER :=>

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
// APPROACH : (recursive approach )    [ T(O)=O(n)  S(O)=O(ht) ]
//     -> we devide the problem into 3 different cases :
//         1. CASE1 :- the node to be deleted has no children : so simply delete the node, nothing else.
//         2. CASE2 :- the node to be deleted has one child (either left or right) , so we will delte the node and in its place we'll return its child.
//         3. CASE3 :- the node to be deleted has two children(both left and right) , so we can do two things :    1:search for the maximum value in its left subtree and put root->val as that, and then delete the max val from left subtree by recursion.
//             2:search for minimum value in the right subtree and put root->val as that, and then delete the minimum val from the left subtree by recursion.(done below)
    
    int minVal(TreeNode *root)      {
        
        TreeNode *temp = root;
        while(temp->left !=NULL )
            temp = temp->left;
        return temp->val;
        
    }
    
    
    TreeNode* deleteNode(TreeNode* root, int key) {
        
        if(root==NULL)
            return NULL;
        
        if(root->val == key)    {
            
            //no child
            if(root->left == NULL && root->right == NULL)   {
                delete root;
                return NULL;
            }
            
            //1 child only : left child
            if(root->left != NULL && root->right == NULL)   {
                TreeNode *temp = root->left;
                delete root;
                return temp;
            }
            //1 child only : right child
            if(root->left == NULL && root->right !=NULL )   {
                TreeNode *temp = root->right;
                delete root;
                return temp;
            }
            
            //2 child
            if(root->left != NULL && root->right != NULL )  {
                int mini = minVal(root->right);          //finding min val in right subtree to use
                root->val = mini;                        //replacing the root val with mini.
                root->right = deleteNode(root->right,mini); //deleting mini from right subtree.
                return root;
            }          
        
        }
        
        if( root->val > key )   {
            root->left = deleteNode(root->left,key);
            return root;
        }
        else if(root->val < key )   {
            root->right = deleteNode(root->right,key);
            return root;
        }
        
        return root;
    }
};