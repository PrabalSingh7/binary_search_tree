
    QUESTION :=>

653. Two Sum IV - Input is a BST
Easy

Share
Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST 
such that their sum is equal to the given target.

 Example 1:
Input: root = [5,3,6,2,4,null,7], k = 9
Output: true
 Example 2:
Input: root = [5,3,6,2,4,null,7], k = 28
Output: false
 
 Constraints:
The number of nodes in the tree is in the range [1, 104].
-104 <= Node.val <= 104
root is guaranteed to be a valid binary search tree.
-105 <= k <= 105

Accepted:324,105
Submissions:549,369



    ANSWER :=>

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    vector<int> inorder;
    unordered_set<int> s;


public:
    
// //APPROACH 1 : using inorder traversal vector and nested loop brute force to find target sum.
// //               T(O)=O(n^2)  &&  S(O)=O(n)
      
//     void inOrder(TreeNode* root,vector<int> &inorder)   {
//         if(root==NULL)      return ;
//         inOrder(root->left,inorder);
//         inorder.push_back(root->val);
//         inOrder(root->right,inorder);
//     }
    
    
//     bool findTarget(TreeNode* root, int k) {
//         inOrder(root,inorder);
//         int size = inorder.size();
//         for(int i=0;i<size-1;i++)  {
//             for(int j=i+1;j<size;j++)   {
//                 int sum = inorder[i]+inorder[j];
//                 if(sum == k)    return true;
//             }
//         }
//         return false;
//     }
    

//APPROACH 2 : using inorder traversal vector and two pointer approach to find target sum.
//               T(O)=O(n)  &&  S(O)=O(n) 
  
//     void inOrder(TreeNode* root,vector<int> &inorder)   {
//         if(root==NULL)      return ;
//         inOrder(root->left,inorder);
//         inorder.push_back(root->val);
//         inOrder(root->right,inorder);
//     }
    
    
//     bool findTarget(TreeNode* root, int k) {
//         inOrder(root,inorder);
//         int l=0,r=inorder.size()-1;
//         while(l<r)  {
//             int sum = inorder[l]+inorder[r];
//             if(sum == k)    return true;
//             else if(sum < k)    l++;
//             else    r--;
//         }
//         return false;
//     }
    

//APPROACH 3 : using hashmap approach to find the target sum reccursively.    
//              T(O)=O(n)  &&  S(O)=O(n)    
   
    bool findTarget(TreeNode* root, int k) {
        if (!root) return false;
        if (s.count(k - root->val)) return true;
        s.insert(root->val);
        return findTarget(root->left, k) || findTarget(root->right, k);
    }
    

};